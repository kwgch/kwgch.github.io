<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | 30才からのプログラマ]]></title>
  <link href="http://kwgch.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://kwgch.github.io/"/>
  <updated>2014-12-09T09:39:43+09:00</updated>
  <id>http://kwgch.github.io/</id>
  <author>
    <name><![CDATA[m.kwgch]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyWorld Confarence2014に参加してきました1]]></title>
    <link href="http://kwgch.github.io/blog/2014/11/16/rwc1/"/>
    <updated>2014-11-16T20:05:29+09:00</updated>
    <id>http://kwgch.github.io/blog/2014/11/16/rwc1</id>
    <content type="html"><![CDATA[<p>Rubyさわり始めてまだ半年ですが参加してきました。</p>

<p><img src="/images/rwc2014_1.JPG" alt="Ruby-logo-notext.png" /></p>

<p>間違いあったら指摘お願いします</p>

<!-- more -->


<h1>1日目（2014/11/13）</h1>

<h2>基調講演 <a href="https://twitter.com/yukihiro_matz">まつもとゆきひろ</a>さん</h2>

<h2>『Rubyが教えてくれたこと』</h2>

<ul>
<li><p>浜松の会社に勤務して社内ツールをつくっていたが、バブル崩壊で社内ツール作成チームが解散した。時間があったのでRubyの開発を始めた</p></li>
<li><p>上司に承認を求めていると進まないのでSkunkwork（会社に報告せずに行う研究開発活動）として進めた</p></li>
<li><p>許可を求めるな、謝罪せよ（3Mの社是）</p></li>
<li><p>アイデアに価値はない。実装のないアイデアはゴミ。</p></li>
<li><p>リチャード・ストールマン、彼は世界を変えた。MatzがRubyを作らなくても、別の自由な開発言語があっただろう。LinusがLinuxを作らなくても、別のフリーOSがあっただろう。しかしStallmanがいなければ、自由なソフトウェアは全てなかっただろう</p></li>
<li><p>魅力的なOSSには魅力的なコミュニティがある。でも止まると死ぬ。</p></li>
<li><p>アマチュアでいよう（完璧な計画よりも柔軟な進歩）。最高のアマチュアは普通のプロよりも上</p></li>
<li><p>開発者はすごいソフトウェアをつくろう。開発者でない人は、すごいソフトウェアを作る手伝いをしよう</p></li>
</ul>


<h3>感想</h3>

<p>感動した。</p>

<p><a href="https://twitter.com/ducky19999/status/532720936491831296">https://twitter.com/ducky19999/status/532720936491831296</a>">https://twitter.com/ducky19999/status/532720936491831296">https://twitter.com/ducky19999/status/532720936491831296</a></a></p>

<h2><a href="https://twitter.com/miyohide">三好秀徳さん</a> (株式会社日立ソリューションズ)</h2>

<h2>『各Ruby処理系の性能計測調査報告とその考察』</h2>

<ul>
<li><p>まずPassengerでRailsを動かしてのベンチマーク。CRubyとJRubyで比較</p></li>
<li><p>JRubyのほうがCPUを消費する（特にGCがひどい）が、CRubyより少ししか速くなかった</p></li>
<li><p>Warbler（Rails appをwar化してJRubyで動かす、のかな？）は上記よりメモリを消費してるように見えた</p></li>
<li><p>PumaはCRuby+Passengerと同じくらいのメモリ消費量</p></li>
</ul>


<p><a href="https://twitter.com/ducky19999/status/532752404148539392">https://twitter.com/ducky19999/status/532752404148539392</a>">https://twitter.com/ducky19999/status/532752404148539392">https://twitter.com/ducky19999/status/532752404148539392</a></a></p>

<h2><a href="https://twitter.com/ktou">須藤功平</a>さん (株式会社クリアコード)</h2>

<h2>『Rubyを使った分散全文検索ミドルウェア』</h2>

<p><a href="http://rabbit-shocker.org/ja/">Rabbit</a>の作者の方</p>

<ul>
<li><p>Rubyの浸透促進案 → 有用アプリをつくろう → ミドルウェアつくろう</p></li>
<li><p>最高速、多機能で勝負しない</p></li>
<li><p>使いやすさで勝負。導入・設定・運用の簡単さが重要</p></li>
<li><p>スレッド、シグナル、フォークは難しい三兄弟</p></li>
<li><p>CPUがボトルネック→処理を減らす</p></li>
<li><p>ネットワークネック→通信量を減らす</p></li>
<li><p>Rubyだから、我々は使うんだ！という強い意志で</p></li>
</ul>


<h3>発表資料</h3>

<p><a href="http://www.slideshare.net/kou/rwc-2014">http://www.slideshare.net/kou/rwc-2014</a>">http://www.slideshare.net/kou/rwc-2014">http://www.slideshare.net/kou/rwc-2014</a></a></p>

<p><a href="http://droonga.org/ja/">分散全文検索エンジンDroonga</a></p>

<h2>坂東塁さん、岩瀬裕章さん (楽天株式会社)</h2>

<h2>『楽天のRubyベース分散型KVS “ROMA”への取り組み－GUIで変わるKey-Value Storeの提案』</h2>

<h3>坂東さん</h3>

<ul>
<li>楽天での開発体制について</li>
</ul>


<p><a href="https://twitter.com/ducky19999/status/532766101994602496">https://twitter.com/ducky19999/status/532766101994602496</a>">https://twitter.com/ducky19999/status/532766101994602496">https://twitter.com/ducky19999/status/532766101994602496</a></a></p>

<ul>
<li><p>基本スクラムでタスクボード、プランニングポーカーとか使ってる</p></li>
<li><p>ホワイトボードにFreeTaskのスペース。20%ルールみたく好きなもの作っていい</p></li>
<li><p>ツールはJira、Confluence、Stash（Atlassian製品）</p></li>
</ul>


<h3>岩瀬さん</h3>

<ul>
<li><p>ROMAは楽天が作成した分散KVS</p></li>
<li><p>ROMAのGUIであるGladiatorをつくった</p></li>
<li><p>なぜなら仕事の80%がROMAのサポート業務になってしまったから</p></li>
</ul>


<h3>発表資料</h3>

<p><a href="http://www.slideshare.net/rakutentech/the-effort-of-rakuten-for-a-distributed-key-value-store-roma-in-ruby">http://www.slideshare.net/rakutentech/the-effort-of-rakuten-for-a-distributed-key-value-store-roma-in-ruby</a>">http://www.slideshare.net/rakutentech/the-effort-of-rakuten-for-a-distributed-key-value-store-roma-in-ruby">http://www.slideshare.net/rakutentech/the-effort-of-rakuten-for-a-distributed-key-value-store-roma-in-ruby</a></a></p>

<h2>本多展幸さん、高尾宏治さん (Rubyプログラミング少年団)</h2>

<h2>『ぼくたち、Rubyプログラミング少年団! ～小学生からはじめるRubyプログラミング～』</h2>

<ul>
<li><p>ラリーペイジ「20年後、あなたが望もうが、望むまいが現在の仕事のほとんどが機械によって代行される」</p></li>
<li><p>これからはプログラミングができることがますます重要に。しかしそれ以上にプログラミングは楽しいもの</p></li>
<li><p>松江市では全市立中学でRubyプログラミング教育が2016年度から実施</p></li>
<li><p>ScratchみたいにグラフィカルにプログラミングができるSmalrubyの紹介</p>

<p>  （App Inventorを思い出しました）</p></li>
</ul>


<p><a href="https://twitter.com/ducky19999/status/532787177512787968">https://twitter.com/ducky19999/status/532787177512787968</a>">https://twitter.com/ducky19999/status/532787177512787968">https://twitter.com/ducky19999/status/532787177512787968</a></a></p>

<h3>発表資料</h3>

<p><a href="http://www.slideshare.net/kouji/kidsrubyfun">http://www.slideshare.net/kouji/kidsrubyfun</a>">http://www.slideshare.net/kouji/kidsrubyfun">http://www.slideshare.net/kouji/kidsrubyfun</a></a></p>

<h2>島田浩二さん (株式会社えにしテック)</h2>

<h2>『私たちの会社を「開発」する ～Company Hacking Guide』</h2>

<ul>
<li><p>経費精算処理：git + YAML + seisan</p></li>
<li><p>お問合せ対応：メールをgithub issuesに登録</p></li>
<li><p>組織として、ソフトウェアを作り続けるチームをいかに支えていくか</p></li>
<li><p>心配するのはやめて、コードを書いて幸せになろう（Matz）</p></li>
<li><p>ふつうの開発のように会社を経営する</p></li>
<li><p>Ruby Under a Microscopeの翻訳が出ます（<a href="http://www.amazon.co.jp//dp/4274050653">Rubyのしくみ</a>）</p></li>
</ul>


<p><a class="embedly-card" href="https://speakerdeck.com/snoozer05/company-hacking-guide-were-developing-our-company">Company Hacking Guide: We&rsquo;re &ldquo;Developing&rdquo; Our Company</a></p>

<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>


<h1>ショートトラック</h1>

<h2>本間紀史さん (株式会社フランジア･ジャパン)</h2>

<h2>『ベトナム･ハノイ市における学校での日本語IT教育にRubyを活用』</h2>

<ul>
<li>ベトナムはオフショア開発拠点として成長</li>
</ul>


<p><a href="https://twitter.com/ducky19999/status/532801150714540034">https://twitter.com/ducky19999/status/532801150714540034</a>">https://twitter.com/ducky19999/status/532801150714540034">https://twitter.com/ducky19999/status/532801150714540034</a></a></p>

<ul>
<li>ソフトウェア開発はクリエイティブで楽しいということをベトナムの学生に教えている</li>
</ul>


<p><a href="http://framgia.com/jp/offshore/index.html">framgia「オフショアでのベトナム開発」</a></p>

<h2>国広卓也さん (岡山大学地球物質科学研究センター)</h2>

<h2>『山陰から小惑星へ－地球惑星物質管理システムの着想と今』</h2>

<ul>
<li><p>太陽系の隕石を分析。そのデータを後世に残したい</p></li>
<li><p>はやぶさサンプルの粒をスライスして、箱に入れて、子データ、孫データ..と増えていく。人間では管理できない。</p></li>
</ul>


<p><a href="https://twitter.com/ducky19999/status/532804707719196673">https://twitter.com/ducky19999/status/532804707719196673</a>">https://twitter.com/ducky19999/status/532804707719196673">https://twitter.com/ducky19999/status/532804707719196673</a></a></p>

<p>これのことかな？</p>

<p><a href="https://github.com/kellydunn/orochi">orochi</a>、<a href="https://github.com/c2h2/medusa">medusa</a></p>

<h2>本田智和さん (松江市)、石原航さん (株式会社テクノプロジェクト)</h2>

<h2>『Matsue Ruby GW「縁sys (えにしす)」が生み出す「人」と「技術」の縁結び～松江市と塩尻市、そしてRubyの新たなる挑戦～』</h2>

<ul>
<li><p>松江市のグループウェア、<a href="http://www.tpj.co.jp/enisys/">縁sys</a>。テクノプロジェクト社が開発しOSSに</p></li>
<li><p>長野県塩尻市でも縁SYSのソースを利用したSymcグループウエアを開発</p></li>
<li><p>民間でも使われ始めている</p></li>
</ul>


<h2>Ruby Prize 2014 表彰式</h2>

<p>最終ノミネート</p>

<ul>
<li><p><a href="https://twitter.com/pat_shaughnessy">Pat Shaughnessy</a>さん</p>

<p>  Ruby Under a Microscope</p></li>
<li><p><a href="https://twitter.com/matsumotory">松本 亮介</a>さん</p>

<p>  HTTPサーバにおけるmruby活用</p></li>
<li><p><a href="https://twitter.com/hsbt">柴田 博志</a>さん</p>

<p>  開発環境の整備、リリース環境の改善</p></li>
</ul>


<p><a href="https://twitter.com/ducky19999/status/532814191816503296">https://twitter.com/ducky19999/status/532814191816503296</a>">https://twitter.com/ducky19999/status/532814191816503296">https://twitter.com/ducky19999/status/532814191816503296</a></a></p>

<ul>
<li><p>RubyのCI環境の為にruby associationと交渉</p></li>
<li><p>OSXでのCIのためTravis-ciと交渉</p></li>
<li><p>等々</p></li>
</ul>


<h3>受賞講演資料</h3>

<p><a href="http://www.slideshare.net/hsbt/20141013-ruby-worldconf2014">http://www.slideshare.net/hsbt/20141013-ruby-worldconf2014</a>">http://www.slideshare.net/hsbt/20141013-ruby-worldconf2014">http://www.slideshare.net/hsbt/20141013-ruby-worldconf2014</a></a></p>

<h2>レセプション</h2>

<p><a href="https://twitter.com/ducky19999/status/532847004007665665">https://twitter.com/ducky19999/status/532847004007665665</a>">https://twitter.com/ducky19999/status/532847004007665665">https://twitter.com/ducky19999/status/532847004007665665</a></a></p>

<h2>全体的な感想</h2>

<p>司会の白石さんのクオリティやばい</p>

<h2>まとめ</h2>

<p><a href="http://togetter.com/li/744889">まとめてありました</a></p>

<p><a href="https://twitter.com/ducky19999/status/532746132661612545">https://twitter.com/ducky19999/status/532746132661612545</a>">https://twitter.com/ducky19999/status/532746132661612545">https://twitter.com/ducky19999/status/532746132661612545</a></a></p>

<p>Rubyたのしい</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SonicGardenコードレビュー勉強会#2 に参加しました]]></title>
    <link href="http://kwgch.github.io/blog/2014/10/08/sg-learning/"/>
    <updated>2014-10-08T12:03:37+09:00</updated>
    <id>http://kwgch.github.io/blog/2014/10/08/sg-learning</id>
    <content type="html"><![CDATA[<p>広島からリモートで、SonicGardenコードレビュー勉強会#2 に参加しました。</p>

<p><img src="http://www.sonicgarden.jp/assets/logo-535075f3e242d36af1a349451b6bdabf.png" alt="sonic_garden" /></p>

<!-- more -->


<h1>何をしたか</h1>

<p><a href="http://www.sonicgarden.jp/">SonicGarden</a>さんの主催する、コードレビュー勉強会に参加しました。</p>

<p>Ruby on Railsのソースコードレビューになります。</p>

<p>今回で２回目です。10名の参加でした。</p>

<h1>なぜ参加したのか</h1>

<p>実は、私はSonicGardenさんの<a href="http://www.sonicgarden.jp/guild">ソニックガーデンギルド</a>に挑戦中なのです。</p>

<p>その一環としてコードレビューを受けるのですが、ほかの人のコードレビューにも参加して、学習を加速させるというわけです。</p>

<h1>どうやったのか</h1>

<p><a href="http://www.google.com/intl/ja/+/learnmore/hangouts/onair.html">Google Hangouts on Air</a>というサービスを利用して参加しました。</p>

<p>これは、ライブ配信を行いながらビデオ通話やチャットができ、配信を終了するとYoutubeに動画として登録される、というものです。すごい！</p>

<p>レビューアはCTOの松村さんです。</p>

<h1>困ったこと</h1>

<p>はじめのうち、音声がハウリングしてしまい、よく聞き取れなくなりました。</p>

<p>レビューアとレビューイ以外がマイクをOFFにするといい具合になったので、チャット等で質問を投げる形式ですすめました。</p>

<h1>感想</h1>

<p>コードレビューをリアルタイムで視聴して、その場で質問できるというのは、すごくよい勉強になると思いました。</p>

<p>今回は見ながら考えてばかりで、質問投げれなかったのですが…</p>

<h1>学んだこと</h1>

<p>今回も含め、過去のレビュー動画を見て学んだことを、列挙してみます。</p>

<h3>全般</h3>

<ul>
<li>極力コードが短くなるようにする</li>
<li>ひとつのメソッドにひとつの仕事を書く</li>
<li>セッションに大きなデータ入れない</li>
<li>Ruby1.9以降のhashシンタックスを使ってコードを短く書く</li>
</ul>


<h3>controller</h3>

<ul>
<li>ロジックはconrollerではなくmodelに書く</li>
<li>scaffoldくらいの量のcontrollerで機能を実現できるのが理想</li>
<li>表示に関する処理は、controllerではなくviewやhelperに書く</li>
<li>共通した処理はbefore_actionなどのフィルターにまとめる</li>
<li>find!メソッドでデータ取れなければ、例外で404ページに飛ばせる</li>
</ul>


<h3>model</h3>

<ul>
<li>正しいリレーションにする （belongs_toを書く）</li>
<li>scopeでModelに検索条件を定義できる</li>
<li><a href="https://github.com/satour/rails-style-guide/blob/master/README-jaJA.md#sexy-validations">&ldquo;sexy&rdquo; validations</a> を利用する</li>
<li>ActiveRecordのメソッドチェインを使って流れるように書く</li>
<li>after_saveなど、ActiveRecordのコールバックを効果的に使う</li>
<li>アソシエーションしたモデルは、直接操作しない</li>
<li>親オブジェクトからメソッドチェイン的にbuildを呼び出すと、引数忘れがない</li>
<li>find_or_create_by便利</li>
<li>1対多のモデルで<a href="http://blog.livedoor.jp/sasata299/archives/51931176.html">accepts_nested_attributes_for</a>を使うとコードがすっきりする</li>
<li>has_manyなモデルはviewで<a href="http://railsdoc.com/references/fields_for">fields_for</a>を使う</li>
<li><a href="https://github.com/FooBarWidget/default_value_for">default_value_for</a>を使うと、modelにデフォルト値が簡単に書ける</li>
</ul>


<h3>view</h3>

<ul>
<li>helperを使ってDRYにする</li>
<li>erbで文字列に変数を連結するときは、+でつなげるより、#{ 変数 } を使う</li>
<li><a href="https://github.com/plataformatec/simple_form">simple_form</a>を使うと、シンプルなフォームなら早く作れる（デザインが凝った画面は大変かも）</li>
<li>パンくずリストは<a href="https://github.com/lassebunk/gretel">gretel</a>を使うとよい</li>
<li>hamlでインデントつけてもHTML通りにならない。<a href="http://railsdoc.com/references/content_tag_for">content_tag_for</a>を使う(これは好み)</li>
</ul>


<h3>routes</h3>

<ul>
<li>routesのresourcesブロックでmember（単票系）やcollection（一覧系）が使える</li>
<li>リソースを入れ子にして、親を only:[ ] だけにすると、子供のURLのみ生成</li>
<li>モデルのカーディナリティを意識したURL設計をする</li>
</ul>


<h3>そのほか</h3>

<ul>
<li>githubでURLをcompare/&lt;ハッシュ>&hellip;masterと打てばコンペアできる</li>
<li><a href="https://github.com/plataformatec/devise">devise</a>と<a href="https://github.com/intridea/omniauth">omniauth</a>で、Twitterとgithubアカウントでのログインを可能に</li>
<li><a href="https://github.com/charliesome/better_errors">better_errors</a>、<a href="https://github.com/banister/binding_of_caller">binding_of_caller</a>を入れて、エラー画面でreplできる</li>
<li><a href="https://github.com/intridea/hashie">hashie</a>を使って、ハッシュにドットでアクセスできる</li>
<li><a href="https://github.com/brainspec/enumerize">enumerize</a>を使うと列挙が扱える</li>
</ul>


<h1>まとめ</h1>

<p>とても勉強になります！また参加したいです。</p>

<p>ちなみにSonicGardenさんでは<a href="http://www.sonicgarden.jp/guild">ギルド参加者を募集しています</a>。</p>

<p><a href="http://www.sonicgarden.jp/category/concept/">納品のない受託開発</a>に興味のあるエンジニアは、申し込んでみるとよいのではないでしょうか。</p>
]]></content>
  </entry>
  
</feed>
